package com.productapp.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

@Repository
@Primary
public class ProductDaoJdbcTemplateImpl implements ProductDao {

	private JdbcTemplate jdbcTemplate;

	@Autowired
	public ProductDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	@Override
	public List<Product> getAll() {
		return jdbcTemplate.query("select * from product_table", new ProductRowMapper());
	}

	@Override
	public Product getById(Integer id) {
		return jdbcTemplate.queryForObject("select * from product_table where id=?",new ProductRowMapper(), id);
	}

	@Override
	public Product addProduct(Product product) {
		jdbcTemplate.update("insert into product_table(name, price, isAvailable) values(?,?,?)",
				new Object[] {product.getName(), product.getPrice(), product.isAvailable()});
		return product;
	}

	@Override
	public Product deleteProduct(Integer id) {
		Product product = getById(id);
		try {
			Connection connection = dataSource.getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("delete from product_table where id=?");
			preparedStatement.setInt(1, id);
			preparedStatement.executeUpdate();
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return product;
	}

	@Override
	public Product updateProduct(Integer id, Product product) {
		Product productToUpdate = getById(id);
		try {
			Connection connection = dataSource.getConnection();
			PreparedStatement preparedStatement = connection
					.prepareStatement("update product_table set price =? ,isAvailable=? where id=?");
			preparedStatement.setBigDecimal(1, product.getPrice());
			preparedStatement.setBoolean(2, product.isAvailable());
			preparedStatement.setInt(3, id);
			preparedStatement.executeUpdate();
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return product;
	}

}
